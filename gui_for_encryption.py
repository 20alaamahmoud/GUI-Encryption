# -*- coding: utf-8 -*-
"""GUI for Encryption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cFbp9Emtqm_CSA-hlwnFIf2ATnO5HKFP
"""

!pip install ipywidgets
!jupyter nbextension enable --py widgetsnbextension

from ipywidgets import *
from IPython.display import display

# Playfair Cipher functions
def generate_key_square(key):
  key = key.replace(' ', '').upper()
  key_square = list(key)
  alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"

  for char in alphabet:
      if char not in key_square:
          key_square.append(char)

  key_square = [key_square[i:i+5] for i in range(0, 25, 5)]

  return key_square

def find_position(key_square, letter):
  for i in range(5):
      for j in range(5):
          if key_square[i][j] == letter:
              return i, j

def playfair_encrypt(plaintext, key_square):
  plaintext = plaintext.replace(' ', '').upper()
  ciphertext = ''

  i = 0
  while i < len(plaintext):
      if i == len(plaintext) - 1 or plaintext[i] == plaintext[i + 1]:
          plaintext = plaintext[:i + 1] + 'X' + plaintext[i + 1:]
      i += 2

  if len(plaintext) % 2 != 0:
      plaintext += 'X'

  i = 0
  while i < len(plaintext):
      row1, col1 = find_position(key_square, plaintext[i])
      row2, col2 = find_position(key_square, plaintext[i + 1])

      if row1 == row2:
          ciphertext += key_square[row1][(col1 + 1) % 5] + key_square[row2][(col2 + 1) % 5]
      elif col1 == col2:
          ciphertext += key_square[(row1 + 1) % 5][col1] + key_square[(row2 + 1) % 5][col2]
      else:
          ciphertext += key_square[row1][col2] + key_square[row2][col1]

      i += 2

  return ciphertext

# Monoalphabetic Cipher functions
def generate_monoalphabetic_mapping(key):
  key = key.upper()
  alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  mapping = {}
  for i in range(26):
      mapping[alphabet[i]] = key[i]
  return mapping

def monoalphabetic_encrypt(plaintext, mapping):
  plaintext = plaintext.upper()
  ciphertext = ""
  for char in plaintext:
      if char.isalpha():
          encrypted_char = mapping[char]
          ciphertext += encrypted_char
      else:
          ciphertext += char
  return ciphertext



# Caesar Cipher functions
def caesar_encrypt(plaintext, shift):
  ciphertext = ""
  for char in plaintext:
      if char.isalpha():
          ascii_offset = 65 if char.isupper() else 97
          encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
          ciphertext += encrypted_char
      else:
          ciphertext += char
  return ciphertext

# GUI functions
def encrypt_button_click(button):
  plaintext = plaintext_text.value

  # Playfair Cipher
  playfair_key = playfair_key_text.value
  playfair_key_square = generate_key_square(playfair_key)
  playfair_ciphertext = playfair_encrypt(plaintext, playfair_key_square)
  playfair_ciphertext_text.value = playfair_ciphertext

  # Monoalphabetic Cipher
  monoalphabetic_key = monoalphabetic_key_text.value
  monoalphabetic_mapping = generate_monoalphabetic_mapping(monoalphabetic_key)
  monoalphabetic_ciphertext = monoalphabetic_encrypt(plaintext,    monoalphabetic_mapping)
  monoalphabetic_ciphertext_text.value = monoalphabetic_ciphertext

  # Caesar Cipher
  caesar_shift = int(caesar_shift_text.value)
  caesar_ciphertext = caesar_encrypt(plaintext, caesar_shift)
  caesar_ciphertext_text.value = caesar_ciphertext

# Create the GUI
plaintext_label = Label(value="Plaintext:")
plaintext_text = Textarea()

playfair_key_label = Label(value="Playfair Cipher Key:")
playfair_key_text = Textarea()

playfair_ciphertext_label = Label(value="Playfair Cipher Ciphertext:")
playfair_ciphertext_text = Textarea()

monoalphabetic_key_label = Label(value="Monoalphabetic Cipher Key:")
monoalphabetic_key_text = Textarea()

monoalphabetic_ciphertext_label = Label(value="Monoalphabetic Cipher Ciphertext:")
monoalphabetic_ciphertext_text = Textarea()

caesar_shift_label = Label(value="Caesar Cipher Shift:")
caesar_shift_text = Text()

caesar_ciphertext_label = Label(value="Caesar Cipher Ciphertext:")
caesar_ciphertext_text = Textarea()

encrypt_button = Button(description="Encrypt")
encrypt_button.on_click(encrypt_button_click)

# Display the GUI
display(plaintext_label, plaintext_text,
      playfair_key_label, playfair_key_text,
      playfair_ciphertext_label, playfair_ciphertext_text,
      monoalphabetic_key_label, monoalphabetic_key_text,
      monoalphabetic_ciphertext_label, monoalphabetic_ciphertext_text,
      caesar_shift_label, caesar_shift_text,
      caesar_ciphertext_label, caesar_ciphertext_text,
      encrypt_button)